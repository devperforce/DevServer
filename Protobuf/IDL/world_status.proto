syntax = "proto3";
import "common.proto";
//import "google/protobuf/wrappers.proto";
//import "google/protobuf/timestamp.proto";

package ws;

message LoginReq {
	option (type_enum) = kLoginReq;
	int64 user_uid = 1;
	string nickname = 2;
}

message LoginRes {
	enum Result {
		kSuccess = 0;
		kDuplicate = 1;
	}
	option (type_enum) = kLoginRes;
	Result result = 1;
}

message ChatBroadcastReq {
	option (type_enum) = kChatBroadcastReq;
	int64 user_uid = 1;
	string message = 2;
}

message ChatBroadcastNotify {
	option (type_enum) = kChatBroadcastNotify;
	string nickname = 1;
	string message = 2;
}

message ChatUnicastReq {
	option (type_enum) = kChatUnicastReq;
	int64 to_user_uid = 1;
	string message = 2;
}

message ChatBroadcastRes {
	enum Result {
		kSuccess = 0;
		kLogOff = 1;
	}
	option (type_enum) = kChatUnicastRes;
	string to_nickname = 1;
	string message = 2;
	Result result = 3;
}

message ChatUnicastNotify {
	option (type_enum) = kChatUnicastNotify;
	string from_nickname = 1;
	string message = 2;
}


/*
message NpcInfo {
	int32 unique_id = 1;
	int64 hp = 2;
}

enum HeroType {
	kWarrier = 0;
	kRanger = 1;
	kHealer = 2;
}

enum SkillType {
	kNormal = 0;
	kAdvance = 1;
	kPassive = 2;
}

enum DamageType {
	kNormalDamage = 0;
	kCriticalDamage = 1; // 크리티컬
	kIgnoreDefenseDamage = 2; // 방어무시
	kBlockDamage = 3; // 블락
	kNoDefenseDamage = 4; // 방어불가
}

message HeroInfo {
	HeroType type = 1;
	int32 tier = 2;
	repeated int32 skill_ids = 3;
}

message PlayerInfo {
	int64 user_uid = 1;
	string nickname = 2;
	repeated HeroInfo hero_infos = 3;
}

message TopPointUserInfo {
	int64 user_uid = 1;
	string nickname = 2;
	int64 damage_point = 3;
}

message RewardInfo {
	int64 gold = 1;
	int32 gem = 2;
	int32 transpaper = 3;
}

message LuckyRewardUserInfo {
	int64 user_uid = 1;
	string nickname = 2;
}

message LoginReq {
	option (type_enum) = kLoginReq;
	PlayerInfo player_info = 1;
}

message LoginRes {
	option (type_enum) = kLoginRes;
	bool result = 1;
	bool cached = 2;
}

message DungeonUserInfo {
	int32 index = 1;
	PlayerInfo player_info = 2;	
}

message FindDungeonReq {
	option (type_enum) = kFindDungeonReq;
}

message FindDungeonRes {
	option (type_enum) = kFindDungeonRes;
	google.protobuf.UInt32Value dungeon_id = 1;
}

message JoinDungeonReq {
	option (type_enum) = kJoinDungeonReq;
	int32 dungeon_id = 1;
}

message JoinDungeonRes {
	option (type_enum) = kJoinDungeonRes;
	google.protobuf.UInt32Value dungeon_id = 1;
	int32 dungeon_index = 2;
	google.protobuf.Timestamp remaining_time = 3;
}

message JoinDungeonNoti {
	option (type_enum) = kJoinDungeonNoti;
	int32 dungeon_index = 1;
	PlayerInfo player_info = 2;
	repeated HeroInfo hero_infos = 3;
}

message LeaveDungeonReq {
	option (type_enum) = kLeaveDungeonReq;
}

message LeaveDungeonRes {
	option (type_enum) = kLeaveDungeonRes;
}

message LeaveDungeonNoti {
	option (type_enum) = kLeaveDungeonNoti;
	int64 user_uid = 1;
}

message CastSkillReq {
	option (type_enum) = kCastSkillReq;
	int64 user_uid = 1;
	HeroType hero_type = 2;
	SkillType skill_type = 3;
	int32 skill_id = 4;
}

message CastSkillRes {
	enum FailReason {
		kNoneTarget = 0;
	}
	option (type_enum) = kCastSkillRes;
	int64 user_uid = 1;
	FailReason reason = 2;
}

message CastSkillNoti {
	option (type_enum) = kCastSkillNoti;
	int64 user_uid = 1;
	HeroType hero_type = 2;
	SkillType skill_type = 3;
	int32 skill_id = 4;
}

message DamageReq {
	option (type_enum) = kDamageReq;
	int64 user_uid = 1;
	HeroType hero_type = 2;
	int64 damage = 3;
	DamageType damage_type = 4;
	int32 sfx_id = 5;
	int32 vfx_id = 6;
}

message DamageNoti {
	option (type_enum) = kDamageNoti;
	int64 user_uid = 1;
	HeroType hero_type = 2;
	int64 damage = 3;
	DamageType damage_type = 4;
	int32 sfx_id = 5;
	int32 vfx_id = 6;
}

message EndDungeonNoti {
	option (type_enum) = kEndDungeonNoti;
	repeated TopPointUserInfo top_point_users = 1;
	repeated RewardInfo reward_infos = 2;
	LuckyRewardUserInfo lucky_reward_user = 3;
	RewardInfo lucky_reward = 4;
}

message OtherPlayerReq {
	option (type_enum) = kOtherPlayerReq;
}

message OtherPlayerRes {
	option (type_enum) = kOtherPlayerRes;
	repeated DungeonUserInfo other_infos = 1;
}

message CreateNpcNoti {
	option (type_enum) = kCreateNpcNoti;
	int32 unique_id = 1;
	int64 max_hp = 2;
	int64 hp = 3;
}

message DestroyNpcNoti {
	option (type_enum) = kDestroyNpcNoti;
	int32 unique_id = 1;
	RewardInfo reward_info = 2;
}

message NpcStatusNoti {
	option (type_enum) = kNpcStatusNoti;
	int32 unique_id = 1;
	int64 max_hp = 2;
	int64 hp = 3;
}

message LastAttackNpcNoti {
	option (type_enum) = kLastAttackNpcNoti;
	int64 user_uid = 1;
	int32 npc_unique_id = 2;
	RewardInfo reward_info = 3;
}

message TopDamagePointNoti {
	option (type_enum) = kTopDamagePointNoti;
	repeated TopPointUserInfo top_point_users = 1;
}

message DamagePointNoti {
	option (type_enum) = kDamagePointNoti;
	int64 damage_point = 1;
}
*/

message PingReq {
	option (type_enum) = kPingReq;
}

message PingRes {
	option (type_enum) = kPingRes;
}

// 던젼 입장

// 던젼 나가기

// 디스 코넥션 상태 저장하기

// 
