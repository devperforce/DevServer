// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world_fighter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_world_5ffighter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_world_5ffighter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_world_5ffighter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_world_5ffighter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_world_5ffighter_2eproto;
namespace ws {
class FindPathReq;
struct FindPathReqDefaultTypeInternal;
extern FindPathReqDefaultTypeInternal _FindPathReq_default_instance_;
class FindPathRes;
struct FindPathResDefaultTypeInternal;
extern FindPathResDefaultTypeInternal _FindPathRes_default_instance_;
class PlayerMoveNoti;
struct PlayerMoveNotiDefaultTypeInternal;
extern PlayerMoveNotiDefaultTypeInternal _PlayerMoveNoti_default_instance_;
class PlayerMoveReq;
struct PlayerMoveReqDefaultTypeInternal;
extern PlayerMoveReqDefaultTypeInternal _PlayerMoveReq_default_instance_;
class PlayerMoveRes;
struct PlayerMoveResDefaultTypeInternal;
extern PlayerMoveResDefaultTypeInternal _PlayerMoveRes_default_instance_;
class Vec2;
struct Vec2DefaultTypeInternal;
extern Vec2DefaultTypeInternal _Vec2_default_instance_;
class Vec2i;
struct Vec2iDefaultTypeInternal;
extern Vec2iDefaultTypeInternal _Vec2i_default_instance_;
}  // namespace ws
PROTOBUF_NAMESPACE_OPEN
template<> ::ws::FindPathReq* Arena::CreateMaybeMessage<::ws::FindPathReq>(Arena*);
template<> ::ws::FindPathRes* Arena::CreateMaybeMessage<::ws::FindPathRes>(Arena*);
template<> ::ws::PlayerMoveNoti* Arena::CreateMaybeMessage<::ws::PlayerMoveNoti>(Arena*);
template<> ::ws::PlayerMoveReq* Arena::CreateMaybeMessage<::ws::PlayerMoveReq>(Arena*);
template<> ::ws::PlayerMoveRes* Arena::CreateMaybeMessage<::ws::PlayerMoveRes>(Arena*);
template<> ::ws::Vec2* Arena::CreateMaybeMessage<::ws::Vec2>(Arena*);
template<> ::ws::Vec2i* Arena::CreateMaybeMessage<::ws::Vec2i>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ws {

// ===================================================================

class Vec2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws.Vec2) */ {
 public:
  inline Vec2() : Vec2(nullptr) {}
  ~Vec2() override;
  explicit constexpr Vec2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vec2(const Vec2& from);
  Vec2(Vec2&& from) noexcept
    : Vec2() {
    *this = ::std::move(from);
  }

  inline Vec2& operator=(const Vec2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec2& operator=(Vec2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vec2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vec2* internal_default_instance() {
    return reinterpret_cast<const Vec2*>(
               &_Vec2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vec2& a, Vec2& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec2* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec2* New() const final {
    return new Vec2();
  }

  Vec2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vec2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vec2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.Vec2";
  }
  protected:
  explicit Vec2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:ws.Vec2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5ffighter_2eproto;
};
// -------------------------------------------------------------------

class Vec2i final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws.Vec2i) */ {
 public:
  inline Vec2i() : Vec2i(nullptr) {}
  ~Vec2i() override;
  explicit constexpr Vec2i(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vec2i(const Vec2i& from);
  Vec2i(Vec2i&& from) noexcept
    : Vec2i() {
    *this = ::std::move(from);
  }

  inline Vec2i& operator=(const Vec2i& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec2i& operator=(Vec2i&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vec2i& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vec2i* internal_default_instance() {
    return reinterpret_cast<const Vec2i*>(
               &_Vec2i_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vec2i& a, Vec2i& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec2i* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec2i* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec2i* New() const final {
    return new Vec2i();
  }

  Vec2i* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec2i>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vec2i& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vec2i& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec2i* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.Vec2i";
  }
  protected:
  explicit Vec2i(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ws.Vec2i)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5ffighter_2eproto;
};
// -------------------------------------------------------------------

class PlayerMoveReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws.PlayerMoveReq) */ {
 public:
  inline PlayerMoveReq() : PlayerMoveReq(nullptr) {}
  ~PlayerMoveReq() override;
  explicit constexpr PlayerMoveReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerMoveReq(const PlayerMoveReq& from);
  PlayerMoveReq(PlayerMoveReq&& from) noexcept
    : PlayerMoveReq() {
    *this = ::std::move(from);
  }

  inline PlayerMoveReq& operator=(const PlayerMoveReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMoveReq& operator=(PlayerMoveReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerMoveReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerMoveReq* internal_default_instance() {
    return reinterpret_cast<const PlayerMoveReq*>(
               &_PlayerMoveReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerMoveReq& a, PlayerMoveReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMoveReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerMoveReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerMoveReq* New() const final {
    return new PlayerMoveReq();
  }

  PlayerMoveReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerMoveReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerMoveReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerMoveReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMoveReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.PlayerMoveReq";
  }
  protected:
  explicit PlayerMoveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
  };
  // .ws.Vec2 pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::ws::Vec2& pos() const;
  PROTOBUF_MUST_USE_RESULT ::ws::Vec2* release_pos();
  ::ws::Vec2* mutable_pos();
  void set_allocated_pos(::ws::Vec2* pos);
  private:
  const ::ws::Vec2& _internal_pos() const;
  ::ws::Vec2* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::ws::Vec2* pos);
  ::ws::Vec2* unsafe_arena_release_pos();

  // @@protoc_insertion_point(class_scope:ws.PlayerMoveReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ws::Vec2* pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5ffighter_2eproto;
};
// -------------------------------------------------------------------

class PlayerMoveRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws.PlayerMoveRes) */ {
 public:
  inline PlayerMoveRes() : PlayerMoveRes(nullptr) {}
  ~PlayerMoveRes() override;
  explicit constexpr PlayerMoveRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerMoveRes(const PlayerMoveRes& from);
  PlayerMoveRes(PlayerMoveRes&& from) noexcept
    : PlayerMoveRes() {
    *this = ::std::move(from);
  }

  inline PlayerMoveRes& operator=(const PlayerMoveRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMoveRes& operator=(PlayerMoveRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerMoveRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerMoveRes* internal_default_instance() {
    return reinterpret_cast<const PlayerMoveRes*>(
               &_PlayerMoveRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlayerMoveRes& a, PlayerMoveRes& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMoveRes* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerMoveRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerMoveRes* New() const final {
    return new PlayerMoveRes();
  }

  PlayerMoveRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerMoveRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerMoveRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerMoveRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMoveRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.PlayerMoveRes";
  }
  protected:
  explicit PlayerMoveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
  };
  // .ws.Vec2 pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::ws::Vec2& pos() const;
  PROTOBUF_MUST_USE_RESULT ::ws::Vec2* release_pos();
  ::ws::Vec2* mutable_pos();
  void set_allocated_pos(::ws::Vec2* pos);
  private:
  const ::ws::Vec2& _internal_pos() const;
  ::ws::Vec2* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::ws::Vec2* pos);
  ::ws::Vec2* unsafe_arena_release_pos();

  // @@protoc_insertion_point(class_scope:ws.PlayerMoveRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ws::Vec2* pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5ffighter_2eproto;
};
// -------------------------------------------------------------------

class PlayerMoveNoti final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws.PlayerMoveNoti) */ {
 public:
  inline PlayerMoveNoti() : PlayerMoveNoti(nullptr) {}
  ~PlayerMoveNoti() override;
  explicit constexpr PlayerMoveNoti(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerMoveNoti(const PlayerMoveNoti& from);
  PlayerMoveNoti(PlayerMoveNoti&& from) noexcept
    : PlayerMoveNoti() {
    *this = ::std::move(from);
  }

  inline PlayerMoveNoti& operator=(const PlayerMoveNoti& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMoveNoti& operator=(PlayerMoveNoti&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerMoveNoti& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerMoveNoti* internal_default_instance() {
    return reinterpret_cast<const PlayerMoveNoti*>(
               &_PlayerMoveNoti_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerMoveNoti& a, PlayerMoveNoti& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMoveNoti* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerMoveNoti* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerMoveNoti* New() const final {
    return new PlayerMoveNoti();
  }

  PlayerMoveNoti* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerMoveNoti>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerMoveNoti& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerMoveNoti& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMoveNoti* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.PlayerMoveNoti";
  }
  protected:
  explicit PlayerMoveNoti(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
  };
  // .ws.Vec2 pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::ws::Vec2& pos() const;
  PROTOBUF_MUST_USE_RESULT ::ws::Vec2* release_pos();
  ::ws::Vec2* mutable_pos();
  void set_allocated_pos(::ws::Vec2* pos);
  private:
  const ::ws::Vec2& _internal_pos() const;
  ::ws::Vec2* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::ws::Vec2* pos);
  ::ws::Vec2* unsafe_arena_release_pos();

  // @@protoc_insertion_point(class_scope:ws.PlayerMoveNoti)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ws::Vec2* pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5ffighter_2eproto;
};
// -------------------------------------------------------------------

class FindPathReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws.FindPathReq) */ {
 public:
  inline FindPathReq() : FindPathReq(nullptr) {}
  ~FindPathReq() override;
  explicit constexpr FindPathReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathReq(const FindPathReq& from);
  FindPathReq(FindPathReq&& from) noexcept
    : FindPathReq() {
    *this = ::std::move(from);
  }

  inline FindPathReq& operator=(const FindPathReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathReq& operator=(FindPathReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathReq* internal_default_instance() {
    return reinterpret_cast<const FindPathReq*>(
               &_FindPathReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FindPathReq& a, FindPathReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindPathReq* New() const final {
    return new FindPathReq();
  }

  FindPathReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindPathReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FindPathReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.FindPathReq";
  }
  protected:
  explicit FindPathReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kMapUidFieldNumber = 1,
  };
  // .ws.Vec2i from = 2;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::ws::Vec2i& from() const;
  PROTOBUF_MUST_USE_RESULT ::ws::Vec2i* release_from();
  ::ws::Vec2i* mutable_from();
  void set_allocated_from(::ws::Vec2i* from);
  private:
  const ::ws::Vec2i& _internal_from() const;
  ::ws::Vec2i* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::ws::Vec2i* from);
  ::ws::Vec2i* unsafe_arena_release_from();

  // .ws.Vec2i to = 3;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::ws::Vec2i& to() const;
  PROTOBUF_MUST_USE_RESULT ::ws::Vec2i* release_to();
  ::ws::Vec2i* mutable_to();
  void set_allocated_to(::ws::Vec2i* to);
  private:
  const ::ws::Vec2i& _internal_to() const;
  ::ws::Vec2i* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::ws::Vec2i* to);
  ::ws::Vec2i* unsafe_arena_release_to();

  // int32 map_uid = 1;
  void clear_map_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 map_uid() const;
  void set_map_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_uid() const;
  void _internal_set_map_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ws.FindPathReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ws::Vec2i* from_;
  ::ws::Vec2i* to_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5ffighter_2eproto;
};
// -------------------------------------------------------------------

class FindPathRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws.FindPathRes) */ {
 public:
  inline FindPathRes() : FindPathRes(nullptr) {}
  ~FindPathRes() override;
  explicit constexpr FindPathRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathRes(const FindPathRes& from);
  FindPathRes(FindPathRes&& from) noexcept
    : FindPathRes() {
    *this = ::std::move(from);
  }

  inline FindPathRes& operator=(const FindPathRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathRes& operator=(FindPathRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathRes* internal_default_instance() {
    return reinterpret_cast<const FindPathRes*>(
               &_FindPathRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FindPathRes& a, FindPathRes& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathRes* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindPathRes* New() const final {
    return new FindPathRes();
  }

  FindPathRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindPathRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FindPathRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.FindPathRes";
  }
  protected:
  explicit FindPathRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 2,
  };
  // repeated .ws.Vec2i paths = 2;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::ws::Vec2i* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ws::Vec2i >*
      mutable_paths();
  private:
  const ::ws::Vec2i& _internal_paths(int index) const;
  ::ws::Vec2i* _internal_add_paths();
  public:
  const ::ws::Vec2i& paths(int index) const;
  ::ws::Vec2i* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ws::Vec2i >&
      paths() const;

  // @@protoc_insertion_point(class_scope:ws.FindPathRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ws::Vec2i > paths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5ffighter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec2

// float x = 1;
inline void Vec2::clear_x() {
  x_ = 0;
}
inline float Vec2::_internal_x() const {
  return x_;
}
inline float Vec2::x() const {
  // @@protoc_insertion_point(field_get:ws.Vec2.x)
  return _internal_x();
}
inline void Vec2::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vec2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ws.Vec2.x)
}

// float y = 2;
inline void Vec2::clear_y() {
  y_ = 0;
}
inline float Vec2::_internal_y() const {
  return y_;
}
inline float Vec2::y() const {
  // @@protoc_insertion_point(field_get:ws.Vec2.y)
  return _internal_y();
}
inline void Vec2::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vec2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ws.Vec2.y)
}

// -------------------------------------------------------------------

// Vec2i

// int32 x = 1;
inline void Vec2i::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vec2i::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vec2i::x() const {
  // @@protoc_insertion_point(field_get:ws.Vec2i.x)
  return _internal_x();
}
inline void Vec2i::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Vec2i::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ws.Vec2i.x)
}

// int32 y = 2;
inline void Vec2i::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vec2i::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vec2i::y() const {
  // @@protoc_insertion_point(field_get:ws.Vec2i.y)
  return _internal_y();
}
inline void Vec2i::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Vec2i::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ws.Vec2i.y)
}

// -------------------------------------------------------------------

// PlayerMoveReq

// .ws.Vec2 pos = 1;
inline bool PlayerMoveReq::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool PlayerMoveReq::has_pos() const {
  return _internal_has_pos();
}
inline void PlayerMoveReq::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::ws::Vec2& PlayerMoveReq::_internal_pos() const {
  const ::ws::Vec2* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::ws::Vec2&>(
      ::ws::_Vec2_default_instance_);
}
inline const ::ws::Vec2& PlayerMoveReq::pos() const {
  // @@protoc_insertion_point(field_get:ws.PlayerMoveReq.pos)
  return _internal_pos();
}
inline void PlayerMoveReq::unsafe_arena_set_allocated_pos(
    ::ws::Vec2* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ws.PlayerMoveReq.pos)
}
inline ::ws::Vec2* PlayerMoveReq::release_pos() {
  
  ::ws::Vec2* temp = pos_;
  pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ws::Vec2* PlayerMoveReq::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:ws.PlayerMoveReq.pos)
  
  ::ws::Vec2* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::ws::Vec2* PlayerMoveReq::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws::Vec2>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::ws::Vec2* PlayerMoveReq::mutable_pos() {
  ::ws::Vec2* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:ws.PlayerMoveReq.pos)
  return _msg;
}
inline void PlayerMoveReq::set_allocated_pos(::ws::Vec2* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ws::Vec2>::GetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:ws.PlayerMoveReq.pos)
}

// -------------------------------------------------------------------

// PlayerMoveRes

// .ws.Vec2 pos = 1;
inline bool PlayerMoveRes::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool PlayerMoveRes::has_pos() const {
  return _internal_has_pos();
}
inline void PlayerMoveRes::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::ws::Vec2& PlayerMoveRes::_internal_pos() const {
  const ::ws::Vec2* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::ws::Vec2&>(
      ::ws::_Vec2_default_instance_);
}
inline const ::ws::Vec2& PlayerMoveRes::pos() const {
  // @@protoc_insertion_point(field_get:ws.PlayerMoveRes.pos)
  return _internal_pos();
}
inline void PlayerMoveRes::unsafe_arena_set_allocated_pos(
    ::ws::Vec2* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ws.PlayerMoveRes.pos)
}
inline ::ws::Vec2* PlayerMoveRes::release_pos() {
  
  ::ws::Vec2* temp = pos_;
  pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ws::Vec2* PlayerMoveRes::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:ws.PlayerMoveRes.pos)
  
  ::ws::Vec2* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::ws::Vec2* PlayerMoveRes::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws::Vec2>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::ws::Vec2* PlayerMoveRes::mutable_pos() {
  ::ws::Vec2* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:ws.PlayerMoveRes.pos)
  return _msg;
}
inline void PlayerMoveRes::set_allocated_pos(::ws::Vec2* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ws::Vec2>::GetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:ws.PlayerMoveRes.pos)
}

// -------------------------------------------------------------------

// PlayerMoveNoti

// .ws.Vec2 pos = 1;
inline bool PlayerMoveNoti::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool PlayerMoveNoti::has_pos() const {
  return _internal_has_pos();
}
inline void PlayerMoveNoti::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::ws::Vec2& PlayerMoveNoti::_internal_pos() const {
  const ::ws::Vec2* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::ws::Vec2&>(
      ::ws::_Vec2_default_instance_);
}
inline const ::ws::Vec2& PlayerMoveNoti::pos() const {
  // @@protoc_insertion_point(field_get:ws.PlayerMoveNoti.pos)
  return _internal_pos();
}
inline void PlayerMoveNoti::unsafe_arena_set_allocated_pos(
    ::ws::Vec2* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ws.PlayerMoveNoti.pos)
}
inline ::ws::Vec2* PlayerMoveNoti::release_pos() {
  
  ::ws::Vec2* temp = pos_;
  pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ws::Vec2* PlayerMoveNoti::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:ws.PlayerMoveNoti.pos)
  
  ::ws::Vec2* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::ws::Vec2* PlayerMoveNoti::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws::Vec2>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::ws::Vec2* PlayerMoveNoti::mutable_pos() {
  ::ws::Vec2* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:ws.PlayerMoveNoti.pos)
  return _msg;
}
inline void PlayerMoveNoti::set_allocated_pos(::ws::Vec2* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ws::Vec2>::GetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:ws.PlayerMoveNoti.pos)
}

// -------------------------------------------------------------------

// FindPathReq

// int32 map_uid = 1;
inline void FindPathReq::clear_map_uid() {
  map_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindPathReq::_internal_map_uid() const {
  return map_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindPathReq::map_uid() const {
  // @@protoc_insertion_point(field_get:ws.FindPathReq.map_uid)
  return _internal_map_uid();
}
inline void FindPathReq::_internal_set_map_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_uid_ = value;
}
inline void FindPathReq::set_map_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_uid(value);
  // @@protoc_insertion_point(field_set:ws.FindPathReq.map_uid)
}

// .ws.Vec2i from = 2;
inline bool FindPathReq::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool FindPathReq::has_from() const {
  return _internal_has_from();
}
inline void FindPathReq::clear_from() {
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
inline const ::ws::Vec2i& FindPathReq::_internal_from() const {
  const ::ws::Vec2i* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::ws::Vec2i&>(
      ::ws::_Vec2i_default_instance_);
}
inline const ::ws::Vec2i& FindPathReq::from() const {
  // @@protoc_insertion_point(field_get:ws.FindPathReq.from)
  return _internal_from();
}
inline void FindPathReq::unsafe_arena_set_allocated_from(
    ::ws::Vec2i* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ws.FindPathReq.from)
}
inline ::ws::Vec2i* FindPathReq::release_from() {
  
  ::ws::Vec2i* temp = from_;
  from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ws::Vec2i* FindPathReq::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:ws.FindPathReq.from)
  
  ::ws::Vec2i* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::ws::Vec2i* FindPathReq::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws::Vec2i>(GetArenaForAllocation());
    from_ = p;
  }
  return from_;
}
inline ::ws::Vec2i* FindPathReq::mutable_from() {
  ::ws::Vec2i* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:ws.FindPathReq.from)
  return _msg;
}
inline void FindPathReq::set_allocated_from(::ws::Vec2i* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ws::Vec2i>::GetOwningArena(from);
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:ws.FindPathReq.from)
}

// .ws.Vec2i to = 3;
inline bool FindPathReq::_internal_has_to() const {
  return this != internal_default_instance() && to_ != nullptr;
}
inline bool FindPathReq::has_to() const {
  return _internal_has_to();
}
inline void FindPathReq::clear_to() {
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
}
inline const ::ws::Vec2i& FindPathReq::_internal_to() const {
  const ::ws::Vec2i* p = to_;
  return p != nullptr ? *p : reinterpret_cast<const ::ws::Vec2i&>(
      ::ws::_Vec2i_default_instance_);
}
inline const ::ws::Vec2i& FindPathReq::to() const {
  // @@protoc_insertion_point(field_get:ws.FindPathReq.to)
  return _internal_to();
}
inline void FindPathReq::unsafe_arena_set_allocated_to(
    ::ws::Vec2i* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ws.FindPathReq.to)
}
inline ::ws::Vec2i* FindPathReq::release_to() {
  
  ::ws::Vec2i* temp = to_;
  to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ws::Vec2i* FindPathReq::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:ws.FindPathReq.to)
  
  ::ws::Vec2i* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::ws::Vec2i* FindPathReq::_internal_mutable_to() {
  
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws::Vec2i>(GetArenaForAllocation());
    to_ = p;
  }
  return to_;
}
inline ::ws::Vec2i* FindPathReq::mutable_to() {
  ::ws::Vec2i* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:ws.FindPathReq.to)
  return _msg;
}
inline void FindPathReq::set_allocated_to(::ws::Vec2i* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ws::Vec2i>::GetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:ws.FindPathReq.to)
}

// -------------------------------------------------------------------

// FindPathRes

// repeated .ws.Vec2i paths = 2;
inline int FindPathRes::_internal_paths_size() const {
  return paths_.size();
}
inline int FindPathRes::paths_size() const {
  return _internal_paths_size();
}
inline void FindPathRes::clear_paths() {
  paths_.Clear();
}
inline ::ws::Vec2i* FindPathRes::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:ws.FindPathRes.paths)
  return paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ws::Vec2i >*
FindPathRes::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:ws.FindPathRes.paths)
  return &paths_;
}
inline const ::ws::Vec2i& FindPathRes::_internal_paths(int index) const {
  return paths_.Get(index);
}
inline const ::ws::Vec2i& FindPathRes::paths(int index) const {
  // @@protoc_insertion_point(field_get:ws.FindPathRes.paths)
  return _internal_paths(index);
}
inline ::ws::Vec2i* FindPathRes::_internal_add_paths() {
  return paths_.Add();
}
inline ::ws::Vec2i* FindPathRes::add_paths() {
  ::ws::Vec2i* _add = _internal_add_paths();
  // @@protoc_insertion_point(field_add:ws.FindPathRes.paths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ws::Vec2i >&
FindPathRes::paths() const {
  // @@protoc_insertion_point(field_list:ws.FindPathRes.paths)
  return paths_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ws

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_world_5ffighter_2eproto
