// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world_status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_world_5fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_world_5fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_world_5fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_world_5fstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_world_5fstatus_2eproto;
namespace ws {
class ChatBroadcastNotify;
struct ChatBroadcastNotifyDefaultTypeInternal;
extern ChatBroadcastNotifyDefaultTypeInternal _ChatBroadcastNotify_default_instance_;
class ChatBroadcastReq;
struct ChatBroadcastReqDefaultTypeInternal;
extern ChatBroadcastReqDefaultTypeInternal _ChatBroadcastReq_default_instance_;
class ChatBroadcastRes;
struct ChatBroadcastResDefaultTypeInternal;
extern ChatBroadcastResDefaultTypeInternal _ChatBroadcastRes_default_instance_;
class ChatUnicastNotify;
struct ChatUnicastNotifyDefaultTypeInternal;
extern ChatUnicastNotifyDefaultTypeInternal _ChatUnicastNotify_default_instance_;
class ChatUnicastReq;
struct ChatUnicastReqDefaultTypeInternal;
extern ChatUnicastReqDefaultTypeInternal _ChatUnicastReq_default_instance_;
class LoginReq;
struct LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRes;
struct LoginResDefaultTypeInternal;
extern LoginResDefaultTypeInternal _LoginRes_default_instance_;
class PingReq;
struct PingReqDefaultTypeInternal;
extern PingReqDefaultTypeInternal _PingReq_default_instance_;
class PingRes;
struct PingResDefaultTypeInternal;
extern PingResDefaultTypeInternal _PingRes_default_instance_;
}  // namespace ws
PROTOBUF_NAMESPACE_OPEN
template<> ::ws::ChatBroadcastNotify* Arena::CreateMaybeMessage<::ws::ChatBroadcastNotify>(Arena*);
template<> ::ws::ChatBroadcastReq* Arena::CreateMaybeMessage<::ws::ChatBroadcastReq>(Arena*);
template<> ::ws::ChatBroadcastRes* Arena::CreateMaybeMessage<::ws::ChatBroadcastRes>(Arena*);
template<> ::ws::ChatUnicastNotify* Arena::CreateMaybeMessage<::ws::ChatUnicastNotify>(Arena*);
template<> ::ws::ChatUnicastReq* Arena::CreateMaybeMessage<::ws::ChatUnicastReq>(Arena*);
template<> ::ws::LoginReq* Arena::CreateMaybeMessage<::ws::LoginReq>(Arena*);
template<> ::ws::LoginRes* Arena::CreateMaybeMessage<::ws::LoginRes>(Arena*);
template<> ::ws::PingReq* Arena::CreateMaybeMessage<::ws::PingReq>(Arena*);
template<> ::ws::PingRes* Arena::CreateMaybeMessage<::ws::PingRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ws {

enum LoginRes_Result : int {
  LoginRes_Result_kSuccess = 0,
  LoginRes_Result_kDuplicate = 1,
  LoginRes_Result_LoginRes_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginRes_Result_LoginRes_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginRes_Result_IsValid(int value);
constexpr LoginRes_Result LoginRes_Result_Result_MIN = LoginRes_Result_kSuccess;
constexpr LoginRes_Result LoginRes_Result_Result_MAX = LoginRes_Result_kDuplicate;
constexpr int LoginRes_Result_Result_ARRAYSIZE = LoginRes_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginRes_Result_descriptor();
template<typename T>
inline const std::string& LoginRes_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginRes_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginRes_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginRes_Result_descriptor(), enum_t_value);
}
inline bool LoginRes_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginRes_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginRes_Result>(
    LoginRes_Result_descriptor(), name, value);
}
enum ChatBroadcastRes_Result : int {
  ChatBroadcastRes_Result_kSuccess = 0,
  ChatBroadcastRes_Result_kLogOff = 1,
  ChatBroadcastRes_Result_ChatBroadcastRes_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChatBroadcastRes_Result_ChatBroadcastRes_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChatBroadcastRes_Result_IsValid(int value);
constexpr ChatBroadcastRes_Result ChatBroadcastRes_Result_Result_MIN = ChatBroadcastRes_Result_kSuccess;
constexpr ChatBroadcastRes_Result ChatBroadcastRes_Result_Result_MAX = ChatBroadcastRes_Result_kLogOff;
constexpr int ChatBroadcastRes_Result_Result_ARRAYSIZE = ChatBroadcastRes_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatBroadcastRes_Result_descriptor();
template<typename T>
inline const std::string& ChatBroadcastRes_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChatBroadcastRes_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChatBroadcastRes_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChatBroadcastRes_Result_descriptor(), enum_t_value);
}
inline bool ChatBroadcastRes_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChatBroadcastRes_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChatBroadcastRes_Result>(
    ChatBroadcastRes_Result_descriptor(), name, value);
}
// ===================================================================

class LoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws.LoginReq) */ {
 public:
  inline LoginReq() : LoginReq(nullptr) {}
  ~LoginReq() override;
  explicit constexpr LoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReq* New() const final {
    return new LoginReq();
  }

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.LoginReq";
  }
  protected:
  explicit LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kUserUidFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int64 user_uid = 1;
  void clear_user_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 user_uid() const;
  void set_user_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_uid() const;
  void _internal_set_user_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ws.LoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class LoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws.LoginRes) */ {
 public:
  inline LoginRes() : LoginRes(nullptr) {}
  ~LoginRes() override;
  explicit constexpr LoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRes(const LoginRes& from);
  LoginRes(LoginRes&& from) noexcept
    : LoginRes() {
    *this = ::std::move(from);
  }

  inline LoginRes& operator=(const LoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRes& operator=(LoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRes* internal_default_instance() {
    return reinterpret_cast<const LoginRes*>(
               &_LoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginRes& a, LoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRes* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRes* New() const final {
    return new LoginRes();
  }

  LoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.LoginRes";
  }
  protected:
  explicit LoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LoginRes_Result Result;
  static constexpr Result kSuccess =
    LoginRes_Result_kSuccess;
  static constexpr Result kDuplicate =
    LoginRes_Result_kDuplicate;
  static inline bool Result_IsValid(int value) {
    return LoginRes_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    LoginRes_Result_Result_MIN;
  static constexpr Result Result_MAX =
    LoginRes_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    LoginRes_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return LoginRes_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return LoginRes_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return LoginRes_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .ws.LoginRes.Result result = 1;
  void clear_result();
  ::ws::LoginRes_Result result() const;
  void set_result(::ws::LoginRes_Result value);
  private:
  ::ws::LoginRes_Result _internal_result() const;
  void _internal_set_result(::ws::LoginRes_Result value);
  public:

  // @@protoc_insertion_point(class_scope:ws.LoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class ChatBroadcastReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws.ChatBroadcastReq) */ {
 public:
  inline ChatBroadcastReq() : ChatBroadcastReq(nullptr) {}
  ~ChatBroadcastReq() override;
  explicit constexpr ChatBroadcastReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatBroadcastReq(const ChatBroadcastReq& from);
  ChatBroadcastReq(ChatBroadcastReq&& from) noexcept
    : ChatBroadcastReq() {
    *this = ::std::move(from);
  }

  inline ChatBroadcastReq& operator=(const ChatBroadcastReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatBroadcastReq& operator=(ChatBroadcastReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatBroadcastReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatBroadcastReq* internal_default_instance() {
    return reinterpret_cast<const ChatBroadcastReq*>(
               &_ChatBroadcastReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChatBroadcastReq& a, ChatBroadcastReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatBroadcastReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatBroadcastReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatBroadcastReq* New() const final {
    return new ChatBroadcastReq();
  }

  ChatBroadcastReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatBroadcastReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatBroadcastReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatBroadcastReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatBroadcastReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.ChatBroadcastReq";
  }
  protected:
  explicit ChatBroadcastReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kUserUidFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 user_uid = 1;
  void clear_user_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 user_uid() const;
  void set_user_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_uid() const;
  void _internal_set_user_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ws.ChatBroadcastReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class ChatBroadcastNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws.ChatBroadcastNotify) */ {
 public:
  inline ChatBroadcastNotify() : ChatBroadcastNotify(nullptr) {}
  ~ChatBroadcastNotify() override;
  explicit constexpr ChatBroadcastNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatBroadcastNotify(const ChatBroadcastNotify& from);
  ChatBroadcastNotify(ChatBroadcastNotify&& from) noexcept
    : ChatBroadcastNotify() {
    *this = ::std::move(from);
  }

  inline ChatBroadcastNotify& operator=(const ChatBroadcastNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatBroadcastNotify& operator=(ChatBroadcastNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatBroadcastNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatBroadcastNotify* internal_default_instance() {
    return reinterpret_cast<const ChatBroadcastNotify*>(
               &_ChatBroadcastNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChatBroadcastNotify& a, ChatBroadcastNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatBroadcastNotify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatBroadcastNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatBroadcastNotify* New() const final {
    return new ChatBroadcastNotify();
  }

  ChatBroadcastNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatBroadcastNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatBroadcastNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatBroadcastNotify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatBroadcastNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.ChatBroadcastNotify";
  }
  protected:
  explicit ChatBroadcastNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string nickname = 1;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:ws.ChatBroadcastNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class ChatUnicastReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws.ChatUnicastReq) */ {
 public:
  inline ChatUnicastReq() : ChatUnicastReq(nullptr) {}
  ~ChatUnicastReq() override;
  explicit constexpr ChatUnicastReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatUnicastReq(const ChatUnicastReq& from);
  ChatUnicastReq(ChatUnicastReq&& from) noexcept
    : ChatUnicastReq() {
    *this = ::std::move(from);
  }

  inline ChatUnicastReq& operator=(const ChatUnicastReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatUnicastReq& operator=(ChatUnicastReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatUnicastReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatUnicastReq* internal_default_instance() {
    return reinterpret_cast<const ChatUnicastReq*>(
               &_ChatUnicastReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChatUnicastReq& a, ChatUnicastReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatUnicastReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatUnicastReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatUnicastReq* New() const final {
    return new ChatUnicastReq();
  }

  ChatUnicastReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatUnicastReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatUnicastReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatUnicastReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatUnicastReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.ChatUnicastReq";
  }
  protected:
  explicit ChatUnicastReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kToUserUidFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 to_user_uid = 1;
  void clear_to_user_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 to_user_uid() const;
  void set_to_user_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_to_user_uid() const;
  void _internal_set_to_user_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ws.ChatUnicastReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 to_user_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class ChatBroadcastRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws.ChatBroadcastRes) */ {
 public:
  inline ChatBroadcastRes() : ChatBroadcastRes(nullptr) {}
  ~ChatBroadcastRes() override;
  explicit constexpr ChatBroadcastRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatBroadcastRes(const ChatBroadcastRes& from);
  ChatBroadcastRes(ChatBroadcastRes&& from) noexcept
    : ChatBroadcastRes() {
    *this = ::std::move(from);
  }

  inline ChatBroadcastRes& operator=(const ChatBroadcastRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatBroadcastRes& operator=(ChatBroadcastRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatBroadcastRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatBroadcastRes* internal_default_instance() {
    return reinterpret_cast<const ChatBroadcastRes*>(
               &_ChatBroadcastRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChatBroadcastRes& a, ChatBroadcastRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatBroadcastRes* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatBroadcastRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatBroadcastRes* New() const final {
    return new ChatBroadcastRes();
  }

  ChatBroadcastRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatBroadcastRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatBroadcastRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatBroadcastRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatBroadcastRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.ChatBroadcastRes";
  }
  protected:
  explicit ChatBroadcastRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChatBroadcastRes_Result Result;
  static constexpr Result kSuccess =
    ChatBroadcastRes_Result_kSuccess;
  static constexpr Result kLogOff =
    ChatBroadcastRes_Result_kLogOff;
  static inline bool Result_IsValid(int value) {
    return ChatBroadcastRes_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    ChatBroadcastRes_Result_Result_MIN;
  static constexpr Result Result_MAX =
    ChatBroadcastRes_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    ChatBroadcastRes_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return ChatBroadcastRes_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return ChatBroadcastRes_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return ChatBroadcastRes_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kToNicknameFieldNumber = 1,
    kMessageFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // string to_nickname = 1;
  void clear_to_nickname();
  const std::string& to_nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_nickname();
  PROTOBUF_MUST_USE_RESULT std::string* release_to_nickname();
  void set_allocated_to_nickname(std::string* to_nickname);
  private:
  const std::string& _internal_to_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_nickname(const std::string& value);
  std::string* _internal_mutable_to_nickname();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .ws.ChatBroadcastRes.Result result = 3;
  void clear_result();
  ::ws::ChatBroadcastRes_Result result() const;
  void set_result(::ws::ChatBroadcastRes_Result value);
  private:
  ::ws::ChatBroadcastRes_Result _internal_result() const;
  void _internal_set_result(::ws::ChatBroadcastRes_Result value);
  public:

  // @@protoc_insertion_point(class_scope:ws.ChatBroadcastRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class ChatUnicastNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws.ChatUnicastNotify) */ {
 public:
  inline ChatUnicastNotify() : ChatUnicastNotify(nullptr) {}
  ~ChatUnicastNotify() override;
  explicit constexpr ChatUnicastNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatUnicastNotify(const ChatUnicastNotify& from);
  ChatUnicastNotify(ChatUnicastNotify&& from) noexcept
    : ChatUnicastNotify() {
    *this = ::std::move(from);
  }

  inline ChatUnicastNotify& operator=(const ChatUnicastNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatUnicastNotify& operator=(ChatUnicastNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatUnicastNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatUnicastNotify* internal_default_instance() {
    return reinterpret_cast<const ChatUnicastNotify*>(
               &_ChatUnicastNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChatUnicastNotify& a, ChatUnicastNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatUnicastNotify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatUnicastNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatUnicastNotify* New() const final {
    return new ChatUnicastNotify();
  }

  ChatUnicastNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatUnicastNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatUnicastNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatUnicastNotify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatUnicastNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.ChatUnicastNotify";
  }
  protected:
  explicit ChatUnicastNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromNicknameFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string from_nickname = 1;
  void clear_from_nickname();
  const std::string& from_nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_nickname();
  PROTOBUF_MUST_USE_RESULT std::string* release_from_nickname();
  void set_allocated_from_nickname(std::string* from_nickname);
  private:
  const std::string& _internal_from_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_nickname(const std::string& value);
  std::string* _internal_mutable_from_nickname();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:ws.ChatUnicastNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class PingReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ws.PingReq) */ {
 public:
  inline PingReq() : PingReq(nullptr) {}
  explicit constexpr PingReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingReq(const PingReq& from);
  PingReq(PingReq&& from) noexcept
    : PingReq() {
    *this = ::std::move(from);
  }

  inline PingReq& operator=(const PingReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingReq& operator=(PingReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingReq* internal_default_instance() {
    return reinterpret_cast<const PingReq*>(
               &_PingReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PingReq& a, PingReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PingReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingReq* New() const final {
    return new PingReq();
  }

  PingReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PingReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PingReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.PingReq";
  }
  protected:
  explicit PingReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ws.PingReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class PingRes final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ws.PingRes) */ {
 public:
  inline PingRes() : PingRes(nullptr) {}
  explicit constexpr PingRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingRes(const PingRes& from);
  PingRes(PingRes&& from) noexcept
    : PingRes() {
    *this = ::std::move(from);
  }

  inline PingRes& operator=(const PingRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingRes& operator=(PingRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingRes* internal_default_instance() {
    return reinterpret_cast<const PingRes*>(
               &_PingRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PingRes& a, PingRes& b) {
    a.Swap(&b);
  }
  inline void Swap(PingRes* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingRes* New() const final {
    return new PingRes();
  }

  PingRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PingRes& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PingRes& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.PingRes";
  }
  protected:
  explicit PingRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ws.PingRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_5fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginReq

// int64 user_uid = 1;
inline void LoginReq::clear_user_uid() {
  user_uid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginReq::_internal_user_uid() const {
  return user_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginReq::user_uid() const {
  // @@protoc_insertion_point(field_get:ws.LoginReq.user_uid)
  return _internal_user_uid();
}
inline void LoginReq::_internal_set_user_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_uid_ = value;
}
inline void LoginReq::set_user_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_uid(value);
  // @@protoc_insertion_point(field_set:ws.LoginReq.user_uid)
}

// string nickname = 2;
inline void LoginReq::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& LoginReq::nickname() const {
  // @@protoc_insertion_point(field_get:ws.LoginReq.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReq::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ws.LoginReq.nickname)
}
inline std::string* LoginReq::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:ws.LoginReq.nickname)
  return _s;
}
inline const std::string& LoginReq::_internal_nickname() const {
  return nickname_.Get();
}
inline void LoginReq::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginReq::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginReq::release_nickname() {
  // @@protoc_insertion_point(field_release:ws.LoginReq.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginReq::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ws.LoginReq.nickname)
}

// -------------------------------------------------------------------

// LoginRes

// .ws.LoginRes.Result result = 1;
inline void LoginRes::clear_result() {
  result_ = 0;
}
inline ::ws::LoginRes_Result LoginRes::_internal_result() const {
  return static_cast< ::ws::LoginRes_Result >(result_);
}
inline ::ws::LoginRes_Result LoginRes::result() const {
  // @@protoc_insertion_point(field_get:ws.LoginRes.result)
  return _internal_result();
}
inline void LoginRes::_internal_set_result(::ws::LoginRes_Result value) {
  
  result_ = value;
}
inline void LoginRes::set_result(::ws::LoginRes_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ws.LoginRes.result)
}

// -------------------------------------------------------------------

// ChatBroadcastReq

// int64 user_uid = 1;
inline void ChatBroadcastReq::clear_user_uid() {
  user_uid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChatBroadcastReq::_internal_user_uid() const {
  return user_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChatBroadcastReq::user_uid() const {
  // @@protoc_insertion_point(field_get:ws.ChatBroadcastReq.user_uid)
  return _internal_user_uid();
}
inline void ChatBroadcastReq::_internal_set_user_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_uid_ = value;
}
inline void ChatBroadcastReq::set_user_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_uid(value);
  // @@protoc_insertion_point(field_set:ws.ChatBroadcastReq.user_uid)
}

// string message = 2;
inline void ChatBroadcastReq::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ChatBroadcastReq::message() const {
  // @@protoc_insertion_point(field_get:ws.ChatBroadcastReq.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatBroadcastReq::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ws.ChatBroadcastReq.message)
}
inline std::string* ChatBroadcastReq::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ws.ChatBroadcastReq.message)
  return _s;
}
inline const std::string& ChatBroadcastReq::_internal_message() const {
  return message_.Get();
}
inline void ChatBroadcastReq::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatBroadcastReq::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatBroadcastReq::release_message() {
  // @@protoc_insertion_point(field_release:ws.ChatBroadcastReq.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatBroadcastReq::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ws.ChatBroadcastReq.message)
}

// -------------------------------------------------------------------

// ChatBroadcastNotify

// string nickname = 1;
inline void ChatBroadcastNotify::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& ChatBroadcastNotify::nickname() const {
  // @@protoc_insertion_point(field_get:ws.ChatBroadcastNotify.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatBroadcastNotify::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ws.ChatBroadcastNotify.nickname)
}
inline std::string* ChatBroadcastNotify::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:ws.ChatBroadcastNotify.nickname)
  return _s;
}
inline const std::string& ChatBroadcastNotify::_internal_nickname() const {
  return nickname_.Get();
}
inline void ChatBroadcastNotify::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatBroadcastNotify::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatBroadcastNotify::release_nickname() {
  // @@protoc_insertion_point(field_release:ws.ChatBroadcastNotify.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatBroadcastNotify::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ws.ChatBroadcastNotify.nickname)
}

// string message = 2;
inline void ChatBroadcastNotify::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ChatBroadcastNotify::message() const {
  // @@protoc_insertion_point(field_get:ws.ChatBroadcastNotify.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatBroadcastNotify::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ws.ChatBroadcastNotify.message)
}
inline std::string* ChatBroadcastNotify::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ws.ChatBroadcastNotify.message)
  return _s;
}
inline const std::string& ChatBroadcastNotify::_internal_message() const {
  return message_.Get();
}
inline void ChatBroadcastNotify::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatBroadcastNotify::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatBroadcastNotify::release_message() {
  // @@protoc_insertion_point(field_release:ws.ChatBroadcastNotify.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatBroadcastNotify::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ws.ChatBroadcastNotify.message)
}

// -------------------------------------------------------------------

// ChatUnicastReq

// int64 to_user_uid = 1;
inline void ChatUnicastReq::clear_to_user_uid() {
  to_user_uid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChatUnicastReq::_internal_to_user_uid() const {
  return to_user_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChatUnicastReq::to_user_uid() const {
  // @@protoc_insertion_point(field_get:ws.ChatUnicastReq.to_user_uid)
  return _internal_to_user_uid();
}
inline void ChatUnicastReq::_internal_set_to_user_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  to_user_uid_ = value;
}
inline void ChatUnicastReq::set_to_user_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_to_user_uid(value);
  // @@protoc_insertion_point(field_set:ws.ChatUnicastReq.to_user_uid)
}

// string message = 2;
inline void ChatUnicastReq::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ChatUnicastReq::message() const {
  // @@protoc_insertion_point(field_get:ws.ChatUnicastReq.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatUnicastReq::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ws.ChatUnicastReq.message)
}
inline std::string* ChatUnicastReq::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ws.ChatUnicastReq.message)
  return _s;
}
inline const std::string& ChatUnicastReq::_internal_message() const {
  return message_.Get();
}
inline void ChatUnicastReq::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatUnicastReq::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatUnicastReq::release_message() {
  // @@protoc_insertion_point(field_release:ws.ChatUnicastReq.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatUnicastReq::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ws.ChatUnicastReq.message)
}

// -------------------------------------------------------------------

// ChatBroadcastRes

// string to_nickname = 1;
inline void ChatBroadcastRes::clear_to_nickname() {
  to_nickname_.ClearToEmpty();
}
inline const std::string& ChatBroadcastRes::to_nickname() const {
  // @@protoc_insertion_point(field_get:ws.ChatBroadcastRes.to_nickname)
  return _internal_to_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatBroadcastRes::set_to_nickname(ArgT0&& arg0, ArgT... args) {
 
 to_nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ws.ChatBroadcastRes.to_nickname)
}
inline std::string* ChatBroadcastRes::mutable_to_nickname() {
  std::string* _s = _internal_mutable_to_nickname();
  // @@protoc_insertion_point(field_mutable:ws.ChatBroadcastRes.to_nickname)
  return _s;
}
inline const std::string& ChatBroadcastRes::_internal_to_nickname() const {
  return to_nickname_.Get();
}
inline void ChatBroadcastRes::_internal_set_to_nickname(const std::string& value) {
  
  to_nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatBroadcastRes::_internal_mutable_to_nickname() {
  
  return to_nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatBroadcastRes::release_to_nickname() {
  // @@protoc_insertion_point(field_release:ws.ChatBroadcastRes.to_nickname)
  return to_nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatBroadcastRes::set_allocated_to_nickname(std::string* to_nickname) {
  if (to_nickname != nullptr) {
    
  } else {
    
  }
  to_nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ws.ChatBroadcastRes.to_nickname)
}

// string message = 2;
inline void ChatBroadcastRes::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ChatBroadcastRes::message() const {
  // @@protoc_insertion_point(field_get:ws.ChatBroadcastRes.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatBroadcastRes::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ws.ChatBroadcastRes.message)
}
inline std::string* ChatBroadcastRes::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ws.ChatBroadcastRes.message)
  return _s;
}
inline const std::string& ChatBroadcastRes::_internal_message() const {
  return message_.Get();
}
inline void ChatBroadcastRes::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatBroadcastRes::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatBroadcastRes::release_message() {
  // @@protoc_insertion_point(field_release:ws.ChatBroadcastRes.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatBroadcastRes::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ws.ChatBroadcastRes.message)
}

// .ws.ChatBroadcastRes.Result result = 3;
inline void ChatBroadcastRes::clear_result() {
  result_ = 0;
}
inline ::ws::ChatBroadcastRes_Result ChatBroadcastRes::_internal_result() const {
  return static_cast< ::ws::ChatBroadcastRes_Result >(result_);
}
inline ::ws::ChatBroadcastRes_Result ChatBroadcastRes::result() const {
  // @@protoc_insertion_point(field_get:ws.ChatBroadcastRes.result)
  return _internal_result();
}
inline void ChatBroadcastRes::_internal_set_result(::ws::ChatBroadcastRes_Result value) {
  
  result_ = value;
}
inline void ChatBroadcastRes::set_result(::ws::ChatBroadcastRes_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ws.ChatBroadcastRes.result)
}

// -------------------------------------------------------------------

// ChatUnicastNotify

// string from_nickname = 1;
inline void ChatUnicastNotify::clear_from_nickname() {
  from_nickname_.ClearToEmpty();
}
inline const std::string& ChatUnicastNotify::from_nickname() const {
  // @@protoc_insertion_point(field_get:ws.ChatUnicastNotify.from_nickname)
  return _internal_from_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatUnicastNotify::set_from_nickname(ArgT0&& arg0, ArgT... args) {
 
 from_nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ws.ChatUnicastNotify.from_nickname)
}
inline std::string* ChatUnicastNotify::mutable_from_nickname() {
  std::string* _s = _internal_mutable_from_nickname();
  // @@protoc_insertion_point(field_mutable:ws.ChatUnicastNotify.from_nickname)
  return _s;
}
inline const std::string& ChatUnicastNotify::_internal_from_nickname() const {
  return from_nickname_.Get();
}
inline void ChatUnicastNotify::_internal_set_from_nickname(const std::string& value) {
  
  from_nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatUnicastNotify::_internal_mutable_from_nickname() {
  
  return from_nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatUnicastNotify::release_from_nickname() {
  // @@protoc_insertion_point(field_release:ws.ChatUnicastNotify.from_nickname)
  return from_nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatUnicastNotify::set_allocated_from_nickname(std::string* from_nickname) {
  if (from_nickname != nullptr) {
    
  } else {
    
  }
  from_nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ws.ChatUnicastNotify.from_nickname)
}

// string message = 2;
inline void ChatUnicastNotify::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ChatUnicastNotify::message() const {
  // @@protoc_insertion_point(field_get:ws.ChatUnicastNotify.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatUnicastNotify::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ws.ChatUnicastNotify.message)
}
inline std::string* ChatUnicastNotify::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ws.ChatUnicastNotify.message)
  return _s;
}
inline const std::string& ChatUnicastNotify::_internal_message() const {
  return message_.Get();
}
inline void ChatUnicastNotify::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatUnicastNotify::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatUnicastNotify::release_message() {
  // @@protoc_insertion_point(field_release:ws.ChatUnicastNotify.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatUnicastNotify::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ws.ChatUnicastNotify.message)
}

// -------------------------------------------------------------------

// PingReq

// -------------------------------------------------------------------

// PingRes

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ws

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ws::LoginRes_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ws::LoginRes_Result>() {
  return ::ws::LoginRes_Result_descriptor();
}
template <> struct is_proto_enum< ::ws::ChatBroadcastRes_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ws::ChatBroadcastRes_Result>() {
  return ::ws::ChatBroadcastRes_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_world_5fstatus_2eproto
